const assert = (assertion: string, p: boolean) => {
  if (!p) {
    throw "assertion failed: " + assertion;
  }
}

const chance_of_missclick = 0.0;
const N = 1_000;
const evidence = ":Refacdesc";

const content = await Bun.file("data/test.txt")
  .text()
  .then(x => x
    .split("\n"));

console.time('my timer');

const longest_line =
    Math.max(...content.map(s => s.length));

const paddedContent =
    content.map(s => s.padEnd(longest_line, " "));

const ph = 1 / content.length;

function levenshteinDistanceClustered(s: string, t: string) {
    if (!s.length) return t.length;
    if (!t.length) return s.length;

    const m = s.length;
    const n = t.length;
    const transitionCost = 1; // Penalty for transitioning between match and edit
    let v0 = new Array(n + 1);
    let v1 = new Array(n + 1);

    // Initialize the first row
    v0[0] = 0;
    for (let j = 1; j <= n; j++) {
        v0[j] = v0[j - 1] + 1 + transitionCost; // Include transition cost
    }

    for (let i = 1; i <= m; i++) {
        v1[0] = v0[0] + 1 + transitionCost; // Include transition cost

        for (let j = 1; j <= n; j++) {
            const cost = s[i - 1] === t[j - 1] ? 0 : 1;

            if (cost === 0) {
                // Characters match, no transition cost
                v1[j] = v0[j - 1];
            } else {
                // Characters don't match, calculate costs with transition penalties
                const deletion = v0[j] + 1 + (v0[j] === v0[j - 1] ? 0 : transitionCost);
                const insertion = v1[j - 1] + 1 + (v1[j - 1] === v0[j - 1] ? 0 : transitionCost);
                const substitution = v0[j - 1] + 1 + (v0[j - 1] === v0[j] ? 0 : transitionCost);

                v1[j] = Math.min(deletion, insertion, substitution);
            }
        }

        // Swap rows for next iteration
        [v0, v1] = [v1, v0];
    }

    return v0[n];
}

const distances =
  paddedContent.map(s => [s, levenshteinDistanceClustered(evidence, s)]);

console.timeEnd('my timer');

(distances.map((d,i)=>[i+1,d]).slice().sort(([, [,i_0]], [, [,i_1]]) => i_1 - i_0)
  .forEach(x => console.log(x)))

